diff -up ./testpar/t_cache.c.ORIG ./testpar/t_cache.c
--- ./testpar/t_cache.c.ORIG	2018-06-04 16:09:58.000000000 -0400
+++ ./testpar/t_cache.c	2020-10-07 22:04:23.537083774 -0400
@@ -1187,15 +1187,15 @@ setup_derived_types(void)
     struct mssg_t sample; /* used to compute displacements */
 
     /* setup the displacements array */
-    if ( ( MPI_SUCCESS != MPI_Address(&sample.req, &displs[0]) ) ||
-         ( MPI_SUCCESS != MPI_Address(&sample.src, &displs[1]) ) ||
-         ( MPI_SUCCESS != MPI_Address(&sample.dest, &displs[2]) ) ||
-         ( MPI_SUCCESS != MPI_Address(&sample.mssg_num, &displs[3]) ) ||
-         ( MPI_SUCCESS != MPI_Address(&sample.base_addr, &displs[4]) ) ||
-         ( MPI_SUCCESS != MPI_Address(&sample.len, &displs[5]) ) ||
-         ( MPI_SUCCESS != MPI_Address(&sample.ver, &displs[6]) ) ||
-         ( MPI_SUCCESS != MPI_Address(&sample.count, &displs[7]) ) ||
-         ( MPI_SUCCESS != MPI_Address(&sample.magic, &displs[8]) ) ) {
+    if ( ( MPI_SUCCESS != MPI_Get_address(&sample.req, &displs[0]) ) ||
+         ( MPI_SUCCESS != MPI_Get_address(&sample.src, &displs[1]) ) ||
+         ( MPI_SUCCESS != MPI_Get_address(&sample.dest, &displs[2]) ) ||
+         ( MPI_SUCCESS != MPI_Get_address(&sample.mssg_num, &displs[3]) ) ||
+         ( MPI_SUCCESS != MPI_Get_address(&sample.base_addr, &displs[4]) ) ||
+         ( MPI_SUCCESS != MPI_Get_address(&sample.len, &displs[5]) ) ||
+         ( MPI_SUCCESS != MPI_Get_address(&sample.ver, &displs[6]) ) ||
+         ( MPI_SUCCESS != MPI_Get_address(&sample.count, &displs[7]) ) ||
+         ( MPI_SUCCESS != MPI_Get_address(&sample.magic, &displs[8]) ) ) {
 
         nerrors++;
         success = FALSE;
@@ -1215,7 +1215,7 @@ setup_derived_types(void)
 
     if ( success ) {
 
-        result = MPI_Type_struct(9, block_len, displs, mpi_types, &mpi_mssg_t);
+        result = MPI_Type_create_struct(9, block_len, displs, mpi_types, &mpi_mssg_t);
 
         if ( result != MPI_SUCCESS ) {
 
diff -up ./testpar/t_mpi.c.ORIG ./testpar/t_mpi.c
--- ./testpar/t_mpi.c.ORIG	2018-06-04 16:09:58.000000000 -0400
+++ ./testpar/t_mpi.c	2020-10-07 22:03:47.503994411 -0400
@@ -715,7 +715,7 @@ static int test_mpio_derived_dtype(char
     blocklens[0] = 1;
     offsets[0]   = 0;
 
-    if((mpi_err= MPI_Type_hindexed(count,blocklens,offsets,MPI_BYTE,&filetype))
+    if((mpi_err= MPI_Type_create_hindexed(count,blocklens,offsets,MPI_BYTE,&filetype))
        != MPI_SUCCESS){
       	MPI_Error_string(mpi_err, mpi_err_str, &mpi_err_strlen);
 	printf("MPI_Type_contiguous failed (%s)\n", mpi_err_str);
@@ -731,7 +731,7 @@ static int test_mpio_derived_dtype(char
     count = 1;
     blocklens[0]=1;
     offsets[0] = 1;
-    if((mpi_err= MPI_Type_hindexed(count,blocklens,offsets,MPI_BYTE,&filetypenew))
+    if((mpi_err= MPI_Type_create_hindexed(count,blocklens,offsets,MPI_BYTE,&filetypenew))
        != MPI_SUCCESS){
       	MPI_Error_string(mpi_err, mpi_err_str, &mpi_err_strlen);
 	printf("MPI_Type_contiguous failed (%s)\n", mpi_err_str);
@@ -752,7 +752,7 @@ static int test_mpio_derived_dtype(char
     bas_filetype[0]  = filetype;
     bas_filetype[1]  = filetypenew;
 
-    if((mpi_err= MPI_Type_struct(outcount,adv_blocklens,adv_disp,bas_filetype,&adv_filetype))
+    if((mpi_err= MPI_Type_create_struct(outcount,adv_blocklens,adv_disp,bas_filetype,&adv_filetype))
        != MPI_SUCCESS){
       	MPI_Error_string(mpi_err, mpi_err_str, &mpi_err_strlen);
 	printf("MPI_Type_struct failed (%s)\n", mpi_err_str);
@@ -898,7 +898,7 @@ test_mpio_special_collective(char *filen
     offsets[1] = (mpi_size+mpi_rank)*count;
 
     if(count !=0) {
-        if((mpi_err = MPI_Type_hindexed(2,
+        if((mpi_err = MPI_Type_create_hindexed(2,
                                         blocklens,
                                         offsets,
                                         etype,
@@ -914,7 +914,7 @@ test_mpio_special_collective(char *filen
             return 1;
         } /* end if */
 
-        if((mpi_err = MPI_Type_hindexed(2,
+        if((mpi_err = MPI_Type_create_hindexed(2,
                                         blocklens,
                                         offsets,
                                         etype,
